#include "hw_config.h"
#include "globalvar.h"
#include "led.h"

extern uint32_t memColor;


extern uint8_t uart4_data[10];
extern uint8_t inputLock;
extern uint8_t cnt; //整体计数，0～72，用来控制数据信号
extern uint8_t icnt; //内部计数，0～1，用来控制时钟和锁存信号
extern int8_t outputLock;
extern uint32_t output1;
extern uint32_t output2;

void conv(uint32_t out,uint32_t color){
    int i = 0;
    output1 = 0;
    output2 = 0;
    for(i=0;i<16;i++){//低16位
        if(out&(1<<i)){
            if(color&(1<<i))//red
                output1 +=(1<<(i<<1)); 
            else   //yellow
                output1 +=(2<<(i<<1));
        }
    }
    for(i=0;i<16;i++){//高16位
        if(out&(1<<(i+16))){
            if(color&(1<<(16+i)))//red
                output2 +=(1<<(i<<1));
            else 
                output2 +=(2<<(i<<1));
        }
    }
    /*    int i = 0;
          output = 0;
          for(i=0;i<32;i++){
          if(out&(1<<i)){
          if(color&(1<<i))//red
          output += (1<<(i<<1));
          else
          output += (2<<(i<<1));
          }
          }*/
}
int main()
{
    inputInit();
    HW_Config();
    while(1){
        static uint8_t twinkFlag = 0;
        uint32_t out = 0;
        uint32_t color = 0;
        if(outputLock==0){
            twinkFlag++;
            twinkFlag %= 2;
            //            if(twinkFlag==0){
            /* if(gLight==0)
               gLight = 0x80000000;
               else
               gLight >>=1;*/
            if(inputLock==0)
                gLight = gButtonInputFlag;//regs[5].val;
            //    gTwink = 0;
            out = gLight;
            //            }else
            //                out =gTwink ^ gLight;
            if(gState==SMEM)
                color = memColor;
            else
                color = gColor;
            conv(out,color);
            cnt = 0;
            icnt = 1;
            outputLock = 1;
        }      
        setState();
        uint8_t t = Single_Read(0xa0,0,uart4_data);
        static uint8_t i = 0;
        if(0==t){
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'s');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'0'+t);
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,uart4_data[0]);
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\n');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET);
        }else{
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'f');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'0'+t);
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\n');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET);
        }
        t = Single_Write(0xa0,0,'a'+(i++));
        if(i==26)
            i = 0;
        if(0==t){
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'w');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'s');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'0'+t);
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\n');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET);
        }else{
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'w');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'f');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'0'+t);
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\n');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TXE)==RESET);
            USART_SendData(UART4,'\r');
            while(USART_GetFlagStatus(UART4,USART_FLAG_TC)==RESET);
        }
        //while(j++<10000000);
    }

    return 0;
}
