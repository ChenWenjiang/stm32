###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.41.0.51741/W32 for ARM     21/Feb/2012  16:06:27 #
# Copyright (C) 1999-2009 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\main.c             #
#    Command line =  F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\main.c -lcN        #
#                    F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\Debug\List\  #
#                    -o F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½Ó #
#                    ÊÕÊµÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\Debug\Obj #
#                    \ --no_cse --no_unroll --no_inline --no_code_motion      #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 5.4\arm\INC\DLib_Config_Normal.h" -I           #
#                    F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\..\ -I       #
#                    F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\..\..\librar #
#                    y\inc\ -I "C:\Program Files\IAR Systems\Embedded         #
#                    Workbench 5.4\arm\INC\" -Ol                              #
#    List file    =  F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\Debug\List\m #
#                    ain.lst                                                  #
#    Object file  =  F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊ #
#                    µÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\EWRAM\Debug\Obj\ma #
#                    in.o                                                     #
#                                                                             #
#                                                                             #
###############################################################################

F:\respir\STM32\¹Ì¼þ°ü¼°¿âº¯Êý\SOU\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé0\06.USARTµÄ·¢ËÍºÍ½ÓÊÕÊµÑé\project\main.c
      1          /**********************************************************
      2          
      3                  +------------------------------------------------+
      4                  |   ÕñÄÏµç×Ó  USARTµÄ·¢ËÍºÍ½ÓÊÕÑÝÊ¾³ÌÐò |
      5                  +------------------------------------------------+
      6          
      7            ´ËÔ´Âë°æÈ¨Êô ÕñÄÏµç×Ó È«È¨ÏíÓÐ£¬ÈçÓûÒýÓÃ£¬¾´ÇëÊðÃû²¢¸æÖª
      8                  ÑÏ½ûËæÒâÓÃÓÚÉÌÒµÄ¿µÄ£¬Î¥Õß±Ø¾¿£¬ºó¹û×Ô¸º
      9                   ÕñÄÏµç×Ó ²úÆ·ÍøÕ¾ http://www.znmcu.cn/
     10                   ÂÛÌ³     http://bbs.znmcu.cn/
     11          							  
     12          ***********************************************************/
     13          #include "stm32f10x_lib.h"
     14          
     15          
     16          
     17          void RCC_Configuration(void);
     18          void NVIC_Configuration(void);
     19          void USART_Config(void);
     20          void USART1_Puts(char * str);//Êä³ö×Ö·û´®
     21          void USART1_Putc(char c);//Êä³öÒ»¸ö×Ö·û
     22          unsigned char USART1_ReceiveChar(void);//½ÓÊÕÒ»¸ö×Ö·û
     23          
     24          char rbuff[100];
     25          
     26          
     27          int main(void)
     28          {
     29            /* System Clocks Configuration */
     30            RCC_Configuration();
     31            
     32                 
     33            /* NVIC configuration */
     34            NVIC_Configuration();
     35            USART_Config();
     36            while(1){}
     37            
     38          }
     39          
     40          /*******************************************************************************
     41          * Function Name  : RCC_Configuration
     42          * Description    : Configures the different system clocks.
     43          * Input          : None
     44          * Output         : None
     45          * Return         : None
     46          *******************************************************************************/
     47          void RCC_Configuration(void)
     48          {
     49            ErrorStatus HSEStartUpStatus;
     50            
     51            /* RCC system reset(for debug purpose) */
     52            RCC_DeInit();
     53          
     54            /* Enable HSE */
     55            RCC_HSEConfig(RCC_HSE_ON);
     56          
     57            /* Wait till HSE is ready */
     58            HSEStartUpStatus = RCC_WaitForHSEStartUp();
     59          
     60            if(HSEStartUpStatus == SUCCESS)
     61            {
     62              /* Enable Prefetch Buffer */
     63              FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
     64          
     65              /* Flash 2 wait state */
     66              FLASH_SetLatency(FLASH_Latency_2);
     67           
     68              /* HCLK = SYSCLK */
     69              RCC_HCLKConfig(RCC_SYSCLK_Div1); 
     70            
     71              /* PCLK2 = HCLK */
     72              RCC_PCLK2Config(RCC_HCLK_Div1); 
     73          
     74              /* PCLK1 = HCLK/2 */
     75              RCC_PCLK1Config(RCC_HCLK_Div2);
     76          
     77              /* PLLCLK = 8MHz * 9 = 72 MHz */
     78              RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
     79          
     80              /* Enable PLL */ 
     81              RCC_PLLCmd(ENABLE);
     82          
     83              /* Wait till PLL is ready */
     84              while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
     85              {
     86              }
     87          
     88              /* Select PLL as system clock source */
     89              RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
     90          
     91              /* Wait till PLL is used as system clock source */
     92              while(RCC_GetSYSCLKSource() != 0x08)
     93              {
     94              }
     95              
     96              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO|RCC_APB2Periph_USART1, ENABLE);
     97              //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
     98            }
     99              
    100          }
    101          
    102          void USART_Config(void)
    103          {
    104              GPIO_InitTypeDef GPIO_InitStructure;
    105              USART_InitTypeDef USART_InitStructure;
    106          
    107              
    108          
    109              /* Configure USART1_Tx as alternate function push-pull */
    110              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    111              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    112              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    113              GPIO_Init(GPIOA, &GPIO_InitStructure);
    114          
    115              /* Configure USART1_Rx as input floating */
    116              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    117              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    118              GPIO_Init(GPIOA, &GPIO_InitStructure);
    119              //USART¹¤×÷ÔÚÒì²½Ä£Ê½ÏÂ
    120              USART_InitStructure.USART_BaudRate = 9600;//²¨ÌØÂÊ
    121              USART_InitStructure.USART_WordLength = USART_WordLength_8b;//Êý¾ÝÎ»Êý
    122              USART_InitStructure.USART_StopBits = USART_StopBits_1;//Ò»¸öÍ£Ö¹Î»
    123              USART_InitStructure.USART_Parity = USART_Parity_No ;//ÎÞÆæÅ¼Ð£ÑéÎ»
    124              USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//ÎÞÓ²¼þ¿ØÖÆÁ÷
    125              USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//·¢ËÍ½ÓÊÕ¾ùÊ¹ÄÜ
    126              /* Configure the USARTx */ 
    127              USART_Init(USART1, &USART_InitStructure);
    128              USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
    129              /* Enable the USARTx */
    130              USART_Cmd(USART1, ENABLE);
    131              
    132          }
    133          
    134          void USART1_Putc(char c)
    135          {
    136              USART_SendData(USART1, c);
    137                  /* Loop until the end of transmission */
    138                  while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    139          }
    140          
    141          void USART1_Puts(char * str)
    142          {
    143              while(*str)
    144              {
    145                  USART_SendData(USART1, *str++);
    146                  /* Loop until the end of transmission */
    147                  while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
    148              }
    149          
    150          }
    151          
    152          unsigned char USART1_ReceiveChar(void)
    153          {
    154            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
    155            return(USART_ReceiveData(USART1));
    156          }
    157          
    158          
    159          /*******************************************************************************
    160          * Function Name  : NVIC_Configuration
    161          * Description    : Configures Vector Table base location.
    162          * Input          : None
    163          * Output         : None
    164          * Return         : None
    165          *******************************************************************************/
    166          void NVIC_Configuration(void)
    167          { 
    168            NVIC_InitTypeDef  NVIC_InitStructure;
    169          #ifdef  VECT_TAB_RAM  
    170            /* Set the Vector Table base location at 0x20000000 */ 
    171            NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
    172          #else  /* VECT_TAB_FLASH  */
    173            /* Set the Vector Table base location at 0x08000000 */ 
    174            NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
    175          #endif
    176            
    177            NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);//ÅäÖÃÓÅÏÈ¼¶×éÎªµÚ1×é£¨ÇÀÕ¼Ê½ÓÅÏÈ¼¶ÓÐ1Î»£¬¸±ÓÅÏÈ¼¶ÓÐ3Î»£©
    178            //ÅäÖÃUSARTÖÐ¶Ï
    179            NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;//ÖÐ¶ÏÍ¨µÀÎªRTCÈ«¾ÖÖÐ¶Ï
    180            NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;//ÇÀÕ¼ÓÅÏÈ¼¶Îª1
    181            NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;//¸±ÓÅÏÈ¼¶Îª0
    182            NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//ÖÐ¶ÏÍ¨µÀÊ¹ÄÜ
    183            NVIC_Init(&NVIC_InitStructure);//³õÊ¼»¯NVIC½á¹¹Ìå
    184          }
    185          
    186          
    187          
    188          

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     NVIC_Configuration      8
     RCC_Configuration       8
     USART1_Putc             8
     USART1_Puts             8
     USART1_ReceiveChar      8
     USART_Config           24
     main                    8


   Section sizes:

     Function/Label     Bytes
     --------------     -----
     rbuff               100
     main                 16
     RCC_Configuration   110
     USART_Config        122
     USART1_Putc          28
     USART1_Puts          38
     USART1_ReceiveChar   24
     NVIC_Configuration   52
     ??DataTable3          4
     ??DataTable3_1        4

 
 100 bytes in section .bss
 398 bytes in section .text
 
 398 bytes of CODE memory
 100 bytes of DATA memory

Errors: none
Warnings: none
